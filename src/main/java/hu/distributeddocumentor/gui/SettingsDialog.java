package hu.distributeddocumentor.gui;

import hu.distributeddocumentor.exporters.Exporter;
import hu.distributeddocumentor.prefs.DocumentorPreferences;
import hu.distributeddocumentor.prefs.ExporterLookup;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import org.slf4j.LoggerFactory;
import say.swing.JFontChooser;

public class SettingsDialog extends javax.swing.JDialog {

    private Exporter selectedDefaultExporter;
    
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private final DocumentorPreferences prefs;

    /**
     * Creates new form SettingsDialog
     */
    public SettingsDialog(java.awt.Frame parent, boolean modal, DocumentorPreferences prefs) {
        super(parent, modal);
        initComponents();
        
        setLocationRelativeTo(parent);
        
        this.prefs = prefs;
        
        ExporterLookup lookup = prefs.getInjector().getInstance(ExporterLookup.class);        
        cbExporters.setModel(new DefaultComboBoxModel(lookup.getAll().toArray()) {
            
            @Override
            public void setSelectedItem(Object anObject) {
                super.setSelectedItem(anObject);
                
                selectedDefaultExporter = (Exporter)anObject;
            }            
        });
        selectedDefaultExporter = lookup.getByTargetName(prefs.getDefaultExporterName());
        cbExporters.getModel().setSelectedItem(selectedDefaultExporter);                             
        
        String initialHgPath = prefs.getMercurialPath();
        String initialHhcPath = prefs.getCHMCompilerPath();
        
        if (initialHgPath == null ||
            initialHgPath.length() == 0) {
            initialHgPath = guessInitialHgPath();
        }
        
        if (initialHhcPath == null ||
            initialHhcPath.length() == 0) {
            initialHhcPath = guessInitialHhcPath();
        }
        
        tbHGPath.setText(initialHgPath);
        tbHHCPath.setText(initialHhcPath);                
        
        updateButtonStates();        
        
        tbHGPath.getDocument().addDocumentListener(
                new DocumentListener() {                   
                    
            @Override
            public void insertUpdate(DocumentEvent de) {                
                updateButtonStates();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {                
                updateButtonStates();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {                
                updateButtonStates();
            }
        });
        
        updateFontLabel();
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tbHGPath = new javax.swing.JTextField();
        btBrowseForHG = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lbMercurialURL = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        tbHHCPath = new javax.swing.JTextField();
        btBrowseForHHC = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lbHHCURL = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cbExporters = new javax.swing.JComboBox();
        btChangeFont = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        lbFont = new javax.swing.JLabel();

        setTitle("DistributedDocumentor Preferences");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("The following external tools must be accessible for the application to work:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Mercurial version control system"));

        jLabel2.setText("Path of 'hg':");

        tbHGPath.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tbHGPathPropertyChange(evt);
            }
        });

        btBrowseForHG.setText("...");
        btBrowseForHG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBrowseForHGActionPerformed(evt);
            }
        });

        jLabel3.setText("If Mercurial is not installed, download and install it from:");

        lbMercurialURL.setText("<html><a href=\"http://mercurial.selenic.com/downloads/\">http://mercurial.selenic.com/downloads/</a></html>");
        lbMercurialURL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbMercurialURL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbMercurialURLMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tbHGPath)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btBrowseForHG, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(lbMercurialURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(tbHGPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btBrowseForHG))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(lbMercurialURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("HTML Help workshop"));

        jLabel5.setText("Path of 'hhc.exe':");

        btBrowseForHHC.setText("...");
        btBrowseForHHC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBrowseForHHCActionPerformed(evt);
            }
        });

        jLabel6.setText("HTML Help workshop is a Windows-only tool to compile CHM files, and");

        lbHHCURL.setText("<html><a href=\"http://www.microsoft.com/downloads/info.aspx?na=41&srcfamilyid=00535334-c8a6-452f-9aa0-d597d16580cc&srcdisplaylang=en&u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2f0%2fa%2f9%2f0a939ef6-e31c-430f-a3df-dfae7960d564%2fhtmlhelp.exe\">HTML Help Workshop at microsoft.com</a></html>");
        lbHHCURL.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbHHCURL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbHHCURLMouseClicked(evt);
            }
        });

        jLabel8.setText("can be downloaded from:");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tbHHCPath)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btBrowseForHHC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel6)
                            .add(lbHHCURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(tbHHCPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btBrowseForHHC))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lbHHCURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("General settings"));

        jLabel4.setText("Default exporter:");

        cbExporters.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btChangeFont.setText("Change...");
        btChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btChangeFontActionPerformed(evt);
            }
        });

        jLabel7.setText("Editor font:");

        lbFont.setText("-");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(jLabel7))
                .add(18, 18, 18)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(lbFont, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btChangeFont))
                    .add(cbExporters, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(cbExporters, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btChangeFont)
                    .add(jLabel7)
                    .add(lbFont))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(okButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 67, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancelButton)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {cancelButton, okButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(18, 18, 18)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(okButton)
                    .add(cancelButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        prefs.setMercurialPath(tbHGPath.getText());
        prefs.setCHMCompilerPath(tbHHCPath.getText());
        prefs.setDefaultExporter(selectedDefaultExporter);
        
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void tbHGPathPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tbHGPathPropertyChange
        
        updateButtonStates();
    }//GEN-LAST:event_tbHGPathPropertyChange

    private void btBrowseForHGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBrowseForHGActionPerformed
        
        final JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(
                new FileFilter() {

                    @Override
                    public boolean accept(File file) {
                        
                        if (prefs.isWindows()) {
                            return file.getName().equalsIgnoreCase("hg.exe") || file.isDirectory();
                        }
                        else {
                            return file.getName().equals("hg");
                        }                                                
                    }

                    @Override
                    public String getDescription() {
                        if (prefs.isWindows()) { 
                            return "Mercurial binary (hg.exe)";
                        }
                        else {
                            return "Mercurial binary (hg)";
                        }
                    }
                    
                });
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            tbHGPath.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btBrowseForHGActionPerformed

    private void btBrowseForHHCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBrowseForHHCActionPerformed
                
        final JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(
                new FileFilter() {

                    @Override
                    public boolean accept(File file) {                                               
                        return file.getName().equalsIgnoreCase("hhc.exe") || file.isDirectory();                        
                    }

                    @Override
                    public String getDescription() {
                        return "HTML Help compiler(hhc.exe)";                        
                    }
                    
                });
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            tbHHCPath.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btBrowseForHHCActionPerformed

    private void lbHHCURLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbHHCURLMouseClicked
        try {
            Desktop.getDesktop().browse(new URI("http://www.microsoft.com/downloads/info.aspx?na=41&srcfamilyid=00535334-c8a6-452f-9aa0-d597d16580cc&srcdisplaylang=en&u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2f0%2fa%2f9%2f0a939ef6-e31c-430f-a3df-dfae7960d564%2fhtmlhelp.exe"));
        } catch (Exception ex) {
            LoggerFactory.getLogger(SettingsDialog.class.getName()).error(null, ex);
        }
    }//GEN-LAST:event_lbHHCURLMouseClicked

    private void lbMercurialURLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbMercurialURLMouseClicked
        
        try {
            Desktop.getDesktop().browse(new URI("http://mercurial.selenic.com/downloads/"));
        } catch (URISyntaxException | IOException ex) {
            LoggerFactory.getLogger(SettingsDialog.class.getName()).error(null, ex);
        }                    
    }//GEN-LAST:event_lbMercurialURLMouseClicked

    private void btChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btChangeFontActionPerformed
                
        JFontChooser chooser = new JFontChooser();
        chooser.setSelectedFont(prefs.getEditorFont());
        if (chooser.showDialog(this) == JFontChooser.OK_OPTION) {
            prefs.setEditorFont(chooser.getSelectedFont());
            updateFontLabel();
        }        
    }//GEN-LAST:event_btChangeFontActionPerformed
    
    private void updateFontLabel() {
        lbFont.setText(prefs.getEditorFont().getFontName() + ", " + prefs.getEditorFont().getSize());
    }
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBrowseForHG;
    private javax.swing.JButton btBrowseForHHC;
    private javax.swing.JButton btChangeFont;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox cbExporters;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lbFont;
    private javax.swing.JLabel lbHHCURL;
    private javax.swing.JLabel lbMercurialURL;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField tbHGPath;
    private javax.swing.JTextField tbHHCPath;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
    
    private void updateButtonStates() {
        
        String hgPath = tbHGPath.getText();
        boolean valid = false;
        
        if (hgPath != null) {
            
            File hgFile = new File(hgPath);
            valid = hgFile.exists() && hgFile.canExecute();
        }
        
        okButton.setEnabled(valid);
    }
    
    private String guessInitialHgPath() {
        
        File hg;
        if (prefs.isWindows()) {
            hg = new File("C:/Program Files/TortoiseHg/hg.exe"); // TODO: use environment variables
            if (hg.exists() && hg.canExecute()) {
                return hg.getAbsolutePath();
            }
            else {
                hg = new File("C:/Program Files (x86)/TortoiseHg/hg.exe"); 
                if (hg.exists() && hg.canExecute()) {
                    return hg.getAbsolutePath();
                }   
            }                    
        } else {
            hg = new File("/usr/bin/hg");
            if (hg.exists() && hg.canExecute()) {
                return hg.getAbsolutePath();
            }
            
            hg = new File("/usr/local/bin/hg");
            if (hg.exists() && hg.canExecute()) {
                return hg.getAbsolutePath();
            }
        }
        
        return "";
    }
    
    private String guessInitialHhcPath() {
        return "";
    }
}
