package hu.distributeddocumentor.gui;

import hu.distributeddocumentor.model.Page;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.util.Observable;
import java.util.Observer;
import org.xhtmlrenderer.simple.FSScrollPane;
import org.xhtmlrenderer.simple.XHTMLPanel;
import org.xhtmlrenderer.swing.BasicPanel;
import org.xhtmlrenderer.swing.FSMouseListener;
import org.xhtmlrenderer.swing.LinkListener;
import org.xhtmlrenderer.swing.NaiveUserAgent;

public class HTMLPreview extends javax.swing.JPanel implements Observer {

    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(HTMLPreview.class.getName());
    private final Page page;
    private final File root;
    private final FSScrollPane scrollPane;
    private final XHTMLPanel htmlPanel;
    
    
    /**
     * Creates new form HTMLPreview
     */
    public HTMLPreview(Page page, final PageEditorHost host, File root) {
        initComponents();
        
        this.page = page;
        this.root = root;                
        
        htmlPanel = new XHTMLPanel();
        htmlPanel.setVisible(true);
        
        scrollPane = new FSScrollPane(htmlPanel);
                
        add(scrollPane, BorderLayout.CENTER);
        
        NaiveUserAgent uac = new NaiveUserAgent();
        
        final String rootUri = root.toURI().toString();
        uac.setBaseURL(rootUri);
        
        htmlPanel.getSharedContext().setUserAgentCallback(uac);
        //htmlPanel.getSharedContext().setReplacedElementFactory(new SwingReplacedElementFactory());
        
        for (Object listener : htmlPanel.getMouseTrackingListeners())
            if (listener instanceof LinkListener)
                htmlPanel.removeMouseTrackingListener((FSMouseListener)listener);
        
        htmlPanel.addMouseTrackingListener(
                new LinkListener() {

                    @Override
                    public void linkClicked(BasicPanel panel, String uri) {
                        
                        if (!uri.startsWith("http://") && 
                            !uri.startsWith("https://") &&
                            !uri.startsWith("file://") &&
                             uri.length() > ".html".length()) {
                        
                            String id = uri.substring(0, uri.length() - ".html".length());
                            host.openOrFocusPage(id);
                            
                        } else if (uri.toString().startsWith(rootUri)) {
                            String fileName = uri.toString().substring(rootUri.length());
                            fileName = fileName.substring(0, fileName.length() - ".html".length());

                            host.openOrFocusPage(fileName);
                        } else {
                            try {
                                Desktop.getDesktop().browse(new URI(uri));
                            }
                            catch (Exception ex) {
                                logger.error(null, ex);
                            }
                        }                        
                    }                    
                });
        
        page.addObserver(this);
        
        renderPage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        renderPage();
    }//GEN-LAST:event_formComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    private void renderPage() {
        // Getting the HTML representation of the page
        String html = page.asHTMLembeddingCSS();
        byte[] htmlBytes = html.getBytes(Charset.forName("utf-8"));
        
        try {
            htmlPanel.setDocument(new ByteArrayInputStream(htmlBytes), root.toURI().toString());
        } catch (Exception ex) {
            logger.error(null, ex);
        }
    }

    @Override
    public void update(Observable o, Object o1) {
        renderPage();
    }                    
}
