package hu.distributeddocumentor.gui;

import hu.distributeddocumentor.controller.ImageListModel;
import hu.distributeddocumentor.model.ImageAlreadyExistsException;
import hu.distributeddocumentor.model.Images;
import hu.distributeddocumentor.utils.StringUtils;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.TransferHandler;
import javax.swing.filechooser.FileFilter;

public class ImageManagerPanel extends javax.swing.JPanel {

    private final Images images;
    private final ImageListModel imagesModel;
    private File lastImageFolder;
    
    /**
     * Creates new form ImageManagerPanel
     */
    public ImageManagerPanel(Images images) {
        
        this.images = images;
        imagesModel = new ImageListModel(images);
        
        initComponents();
        
        imagesList.setRoot(images.getMediaRoot());
        imagesList.setTransferHandler(
                new TransferHandler() {

                    @Override
                    protected Transferable createTransferable(JComponent jc) {
                        
                        JList list = (JList)jc;
                        String item = (String)list.getSelectedValue();
                        
                        return new StringSelection("[[Image:" + StringUtils.convertSpaces(item) + "]]");
                    }

                    @Override
                    public int getSourceActions(JComponent jc) {
                        return LINK;
                    }
                    
                });
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        imagesList = new JListWithImagePreview();
        btAdd = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();

        imagesList.setModel(imagesModel
        );
        imagesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        imagesList.setDragEnabled(true);
        jScrollPane1.setViewportView(imagesList);

        btAdd.setText("Add...");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btRemove.setText("Remove");
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(btAdd)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 26, Short.MAX_VALUE)
                        .add(btRemove)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btAdd)
                    .add(btRemove)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        
        final JFileChooser chooser = new JFileChooser();                
        chooser.setFileFilter(
                new FileFilter() {

                    @Override
                    public boolean accept(File file) {
                        
                        String name = file.getName().toLowerCase();
                        return name.endsWith(".png") ||
                               name.endsWith(".jpg") ||
                               name.endsWith(".jpeg") ||
                               file.isDirectory();
                        
                    }

                    @Override
                    public String getDescription() {
                        return "Image files (*.png, *.jpg)";
                    }
                    
                });
        
        if (lastImageFolder != null)
            chooser.setCurrentDirectory(lastImageFolder);
        
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            
            try {
                images.addImage(chooser.getSelectedFile());
            } catch (ImageAlreadyExistsException ex) {
                Logger.getLogger(ImageManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ImageManagerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            lastImageFolder = chooser.getCurrentDirectory();
        }        
    }//GEN-LAST:event_btAddActionPerformed

    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        
        String name = (String)imagesList.getSelectedValue();
        images.removeImage(name);
        
    }//GEN-LAST:event_btRemoveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btRemove;
    private JListWithImagePreview imagesList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
