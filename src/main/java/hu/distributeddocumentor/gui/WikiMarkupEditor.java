/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hu.distributeddocumentor.gui;

import hu.distributeddocumentor.model.Page;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.*;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author vigoo
 */
public class WikiMarkupEditor extends javax.swing.JPanel {

    private final Page page;
    private final DropTarget dropTarget;
    
    /**
     * Creates new form WikiMarkupEditor
     */
    public WikiMarkupEditor(final Page page) {
        initComponents();
        
        this.page = page;
        
        syncToPage();
        
        editorPane.getDocument().addDocumentListener(
                new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                try {
                    page.setMarkup(de.getDocument().getText(0, de.getDocument().getLength()));
                } catch (BadLocationException ex) {
                    Logger.getLogger(WikiMarkupEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                try {
                    page.setMarkup(de.getDocument().getText(0, de.getDocument().getLength()));
                } catch (BadLocationException ex) {
                    Logger.getLogger(WikiMarkupEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                try {
                    page.setMarkup(de.getDocument().getText(0, de.getDocument().getLength()));
                } catch (BadLocationException ex) {
                    Logger.getLogger(WikiMarkupEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        dropTarget = new DropTarget(editorPane, 
                new DropTargetListener() {

                    @Override
                    public void dragEnter(DropTargetDragEvent dtde) {
                    }

                    @Override
                    public void dragOver(DropTargetDragEvent dtde) {
                    }

                    @Override
                    public void dropActionChanged(DropTargetDragEvent dtde) {
                    }

                    @Override
                    public void dragExit(DropTargetEvent dte) {
                    }

                    @Override
                    public void drop(DropTargetDropEvent dtde) {
                        
                        Transferable transferable = dtde.getTransferable();
                                dtde.acceptDrop(DnDConstants.ACTION_LINK);
                                
                                try {
                                    String str = (String)transferable.getTransferData(DataFlavor.stringFlavor);
                                    
                                    int pos = editorPane.viewToModel(dtde.getLocation());
                                    editorPane.getDocument().insertString(pos, str, null);
                                    
                                } catch (UnsupportedFlavorException ex) {
                                    Logger.getLogger(WikiMarkupEditor.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (IOException ex) {
                                    Logger.getLogger(WikiMarkupEditor.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (BadLocationException ex) {
                                    Logger.getLogger(WikiMarkupEditor.class.getName()).log(Level.SEVERE, null, ex);
                                }                            
                    }                    
                });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();

        editorPane.setFont(new java.awt.Font("Monaco", 0, 13)); // NOI18N
        scrollPane.setViewportView(editorPane);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(scrollPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(scrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    private void syncToPage() {
        editorPane.setText(page.getMarkup());
    }
    
}
