
package hu.distributeddocumentor.gui;

import com.jidesoft.swing.FolderChooser;
import hu.distributeddocumentor.model.Documentation;
import hu.distributeddocumentor.prefs.DocumentorPreferences;
import java.awt.Frame;
import java.io.File;
import java.util.List;

/**
 *
 * @author vigoo
 */
public class StartupDialog extends javax.swing.JDialog {
    
        public enum Action {
        Cancel,
        CreateNew,
        OpenLocal,
        OpenRemote,        
    }
    
    private final DocumentorPreferences prefs;
    private Action finalAction = Action.Cancel;
    private File repositoryRoot;
    private String remoteRepo;
    private String userName;
    private String password;
   
    public Action getFinalAction() {
        return finalAction;
    }
    

    /**
     * Creates new form StartupDialog
     */
    public StartupDialog(java.awt.Frame parent, DocumentorPreferences prefs) {        
        super(parent, true);
        initComponents();
        
        this.prefs = prefs;
        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreateNew = new javax.swing.JButton();
        btnOpenLocal = new javax.swing.JButton();
        btnOpenRemote = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(210, 224, 238));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCreateNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/new doc.png"))); // NOI18N
        btnCreateNew.setText("Create new");
        btnCreateNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCreateNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCreateNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateNewActionPerformed(evt);
            }
        });
        getContentPane().add(btnCreateNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 169, 158));

        btnOpenLocal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/open doc.png"))); // NOI18N
        btnOpenLocal.setText("<html><p align=\"center\">Open from<br/>local directory</p></html>");
        btnOpenLocal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenLocal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpenLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenLocalActionPerformed(evt);
            }
        });
        getContentPane().add(btnOpenLocal, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 390, 169, 158));

        btnOpenRemote.setIcon(new javax.swing.ImageIcon(getClass().getResource("/distribut.png"))); // NOI18N
        btnOpenRemote.setText("<html><p align=\"center\">Clone from<br/>remote repository</p></html>");
        btnOpenRemote.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenRemote.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpenRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenRemoteActionPerformed(evt);
            }
        });
        getContentPane().add(btnOpenRemote, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 390, 169, 158));

        jLabel2.setText("Please choose a documentation to work with:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, -1, -1));

        jButton1.setBackground(new java.awt.Color(255, 0, 51));
        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 0, 40, 20));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/splashscreen.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose();
    }//GEN-LAST:event_closeDialog

    private void btnOpenLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenLocalActionPerformed
        
        browseForFolderAndClose("Select the root directory", Action.OpenLocal);
              
    }//GEN-LAST:event_btnOpenLocalActionPerformed

    private void browseForFolderAndClose(String title, Action action) {
        FolderChooser chooser = new FolderChooser();
        chooser.setDialogTitle(title);
        
        List<String> recent = prefs.getRecentRepositories();
        chooser.setRecentList(recent);
        chooser.setRecentListVisible(true);
        
        if (recent.size() > 0)
            chooser.setSelectedFolder(new File(recent.get(0)));
                
        if (chooser.showOpenDialog(this) == FolderChooser.APPROVE_OPTION) {
            finalAction = action;
            repositoryRoot = chooser.getSelectedFolder();
            
            if (!recent.contains(repositoryRoot.getAbsolutePath())) {               
                recent.add(repositoryRoot.getAbsolutePath());
                prefs.setRecentRepositories(recent);
            }
            
            doClose();
        } else {
            finalAction = Action.Cancel;
        }
    }
    
    private void btnCreateNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateNewActionPerformed
        
        browseForFolderAndClose("Select the root directory", Action.CreateNew);                       
    }//GEN-LAST:event_btnCreateNewActionPerformed

    private void btnOpenRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenRemoteActionPerformed
        
        CloneDialog dlg = new CloneDialog(null, prefs);
        dlg.setVisible(true);
        
        if (dlg.getReturnStatus() == CloneDialog.RET_OK) {
         
            finalAction = Action.OpenRemote;
            
            remoteRepo = dlg.getRepo();
            userName = dlg.getUserName();
            password = dlg.getPassword();
            repositoryRoot = new File(dlg.getTarget());
            
            doClose();
        } else {
            finalAction = Action.Cancel;
        }
    }//GEN-LAST:event_btnOpenRemoteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        doClose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void doClose() {
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateNew;
    private javax.swing.JButton btnOpenLocal;
    private javax.swing.JButton btnOpenRemote;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    boolean initialize(Documentation doc) {
        
        try {
            switch (finalAction) {
                case CreateNew:
                    doc.initAsNew(repositoryRoot);
                    
                    break;
                case OpenLocal:
                    doc.initFromExisting(repositoryRoot);    
                    
                    break;
                case OpenRemote:
                    doc.cloneFromRemote(repositoryRoot, remoteRepo, userName, password);
                    
                    break;                    
            }
            
            return true;
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(StartupDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
            ErrorDialog.show((Frame)getParent(), "Failed to load documentation", ex);                    
            return false;
        }
    }
    
    
}
